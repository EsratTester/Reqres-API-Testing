{
	"info": {
		"_postman_id": "cee793e6-89f0-450c-8fec-146b24b36de4",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39627713",
		"_collection_link": "https://testerbd-4255.postman.co/workspace/tester~a6358b65-aa5e-42f2-88d2-b981728b7aa9/collection/39627713-cee793e6-89f0-450c-8fec-146b24b36de4?action=share&source=collection_link&creator=39627713"
	},
	"item": [
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.data[1].id);\r",
							"\r",
							"\r",
							"pm.test(\"Validate the status code is 200 \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Verify the page value is 2\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.page).to.eql(2);\r",
							"\r",
							"  }) \r",
							"\r",
							"pm.test(\"Validate that all user data contains the fields id, email, first_name, last_name, and avatar\", function(){\r",
							"    const jsonData = pm.response.json().data[0];\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('first_name');\r",
							"    pm.expect(jsonData).to.have.property('last_name');\r",
							"    pm.expect(jsonData).to.have.property('avatar');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users?page=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validate the status code is 201 \", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Verify the name and job fields in the response match the request payload\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Tanim\");\r",
							"    pm.expect(jsonData.job).to.eql(\"Software Engineer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the presence of the id and createdAt fields in the response\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Tanim\",\r\n\"job\": \"Software Engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate the status code is 200 \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Validate that all user data contains the fields id, email, first_name, last_name, and avatar\", function(){\r",
							"    const jsonData = pm.response.json().data;\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('first_name');\r",
							"    pm.expect(jsonData).to.have.property('last_name');\r",
							"    pm.expect(jsonData).to.have.property('avatar');\r",
							"});\r",
							"pm.test(\"Ensure the support section contains valid url and text fields\", function(){\r",
							"    const jsonData = pm.response.json().support;\r",
							"    pm.expect(jsonData).to.have.property('url');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate the status code is 200 \", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Verify the name and job fields in the response match the request payload\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Jane Doe\");\r",
							"    pm.expect(jsonData.job).to.eql(\"Product Manager\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the presence of the id and createdAt fields in the response\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('updatedAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Jane Doe\",\r\n\"job\": \"Product Manager\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate the status code is 200 \", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Ensure the response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}